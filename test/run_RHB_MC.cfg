process TESTMC = {

  untracked PSet maxEvents = {untracked int32 input = 1001}
  source = PoolSource {
        untracked vstring fileNames ={
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_01.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_02.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_03.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_04.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_05.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_06.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_07.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_08.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_09.root',
        'rfio:/castor/cern.ch/user/s/schmittm/muon_gun/1_5_2/muon_gun_10.root'
       }
  }


# Specify the output file for the reconstructed events.
  module out = PoolOutputModule {
    untracked string fileName ="eventsOutput.root"
  }

# These are some geometry modules needed for recHits and segments
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/CSCGeometry/data/cscGeometry.cfi"
  es_module = MuonNumberingInitialization { }

# Need access to calibration constants.
#

### "Fake" DB
#include "CalibMuon/Configuration/data/CSC_FakeConditions.cff"

### Frontier DB
#include "CalibMuon/Configuration/data/CSC_FrontierConditions.cff"
#es_source=CSCFrontierConditions{}

### This comes from Oana !
#
        es_source = PoolDBESSource { 
          VPSet toGet = {
             { string record = "CSCGainsRcd"
               string tag    = "CSCGains_ideal" },
             { string record = "CSCPedestalsRcd"
               string tag    = "CSCPedestals_ideal" },
             { string record = "CSCNoiseMatrixRcd"
               string tag    = "CSCNoiseMatrix_ideal" },
             { string record = "CSCcrosstalkRcd"
               string tag    = "CSCCrosstalk_ideal" }
                                    }
           bool loadAll = true
## Oracle         
           string connect="oracle://cms_orcoff_int2r/CMS_COND_CSC"
           untracked string catalog = "relationalcatalog_oracle://cms_orcoff_int2r/CMS_COND_GENERAL"

           string timetype = "runnumber"

           PSet DBParameters = {
               untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
               untracked uint32 authenticationMethod = 0
               untracked int32 messageLevel=0
                               }
        untracked PSet maxEvents = {untracked int32 input = 1}
     }

###

# These are some useful utilities.
  service = Timing { }
  service = SimpleMemoryCheck { }
    

#--------------------------------------------------
# Specify the data unpacker, which makes the digi
# (Not needed for simulations...)
#--------------------------------------------------

#--------------------------------------------------
# Specify the recHit reconstruction routine.
#--------------------------------------------------

#  include "RecoLocalMuon/CSCRecHit/data/csc2DRecHits.cfi"
   include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB.cfi"

#--------------------------------------------------
# Specify the segment reconstruction routine.
#--------------------------------------------------

include "RecoLocalMuon/CSCSegment/data/cscSegments.cfi"
   replace cscSegments.algo_type = 3 // DF

#--------------------------------------------------
# Finally, specify my user analysis package !
#--------------------------------------------------
module ana = CSCEfficiency{
    untracked string rootFileName = 'monHists.root'
    untracked int32 WorkInEndcap = 1
    untracked int32 ExtrapolateFromStation = 3
    untracked int32 ExtrapolateToStation = 2
    untracked int32 ExtrapolateToRing = 2
    // true - data; false - MC
    untracked bool runOnData = false
    // if using existing file to recalculate efficiencies
    untracked bool update = false
    untracked string mycscunpacker = "muonCSCDigis"
}


#--------------------------------------------------
# Specify the analysis path and output module.
#--------------------------------------------------
path p = {csc2DRecHits, cscSegments, ana}

# Specify the output:
#	endpath e = {out}

}
