process TESTss = {

   untracked PSet maxEvents = {untracked int32 input = 1001}
   source = PoolSource {
                 untracked vstring fileNames =
          {"file:/uscms_data/d1/stoyan/data/converted_bare/run4318_0.0.root"}
          untracked uint32 debugVebosity = 10
          untracked bool debugFlag = true
#          untracked bool debugFlag = false
   }
 
   include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
   replace cscunpacker.UnpackStatusDigis = true
   replace cscunpacker.isMTCCData = true
  
  es_module = MuonNumberingInitialization { }
  include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"

    include "Geometry/CSCGeometry/data/cscGeometry.cfi"
# B field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   service = Timing { }
   service = SimpleMemoryCheck { }
  include "RecoLocalMuon/CSCRecHit/data/csc2DRecHits.cfi"
  replace csc2DRecHits.CSCStripDigiProducer = "cscunpacker"
  replace csc2DRecHits.CSCWireDigiProducer = "cscunpacker"

# Specify the segment reconstruction routine.
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmSK.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmTC.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmDF.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmST.cfi"
###
# Set the CSCSegAlgo parameters (effectively avoids splitting of segments in 2)
  replace TC_ME1234.dRPhiFineMax = 6.0
  replace TC_ME1234.dPhiFineMax = 200.e-4
  replace SK_ME1234.dRPhiFineMax    = 6.0
  replace SK_ME1234.dPhiFineMax     = 200.e-4
###
#  module cscSegments = CSCSegmentProducer {
  module segmentproducer = CSCSegmentProducer {
    InputTag inputObjects = csc2DRecHits
# Choice of the building algo: 1 SK, 2 TC, 3 DF, 4 ST, ...
###    int32 algo_type = 1
    int32 algo_type = 3
    VPSet algo_psets = {
       {using CSCSegAlgoSK}, {using CSCSegAlgoTC}, {using CSCSegAlgoDF},
       {using CSCSegAlgoST}
    }
  }
# Finally, specify my user analysis package !
module ana = CSCEfficiency{
    untracked bool writeAsciiFiles = false
    untracked string rootFileName = 'monHists.root' 
    untracked int32 WorkInEndcap = 1
    untracked int32 ExtrapolateFromStation = 3
    untracked int32 ExtrapolateToStation = 2 
    untracked int32 ExtrapolateToRing = 2
    // if using existing file to recalculate efficiencies
    untracked bool update = false
}
	
 	module out = PoolOutputModule {
    	untracked string fileName ="prova.root"
 	}

	path p = {cscunpacker,csc2DRecHits,segmentproducer,ana}
# 	endpath ep = {out}
}
