
process TESTss = {

   untracked PSet maxEvents = {untracked int32 input = 101}
   source = PoolSource {
                 untracked vstring fileNames = {
#                 "rfio:/castor/cern.ch/user/s/stoyan/data/run_12915.root"
		 "file:/localscratch/s/stoyan/run4318_0.0.root"
		 }
#                 untracked uint32 firstEvent = 41215
#		 untracked uint32 firstRun = 0
				 
		 
   }

#--------------------------------------------------
# Specify the data unpacker, which makes the digi
# (Not needed for simulations...)
#--------------------------------------------------
  include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
   replace cscunpacker.UnpackStatusDigis = true
   replace cscunpacker.isMTCCData = true

# These are some geometry modules needed for recHits and segments
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/CSCGeometry/data/cscGeometry.cfi"
  es_module = MuonNumberingInitialization { }

# Need access to calibration constants.
#

### "Fake" DB
include "CalibMuon/Configuration/data/CSC_FakeConditions.cff"

### Frontier DB
#include "CalibMuon/Configuration/data/CSC_FrontierConditions.cff"
#es_source=CSCFrontierConditions{}

### This comes from Oana !

#        es_source = PoolDBESSource { 
#          VPSet toGet = {
#             { string record = "CSCGainsRcd"
#               string tag    = "CSCGains_ideal" },
#             { string record = "CSCPedestalsRcd"
#               string tag    = "CSCPedestals_ideal" },
#             { string record = "CSCNoiseMatrixRcd"
#               string tag    = "CSCNoiseMatrix_ideal" },
#             { string record = "CSCcrosstalkRcd"
#               string tag    = "CSCCrosstalk_ideal" }
#                                    }
#           bool loadAll = true
## Oracle         
#           string connect="oracle://cms_orcoff_int2r/CMS_COND_CSC"
#           untracked string catalog = "relationalcatalog_oracle://cms_orcoff_int2r/CMS_COND_GENERAL"
#
#           string timetype = "runnumber"
#
#           PSet DBParameters = {
#               untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
#               untracked uint32 authenticationMethod = 0
#               untracked int32 messageLevel=0
#                               }
#        untracked PSet maxEvents = {untracked int32 input = 1}
#     }

###



# These are some useful utilities.
  service = Timing { }
  service = SimpleMemoryCheck { }
#
#--------------------------------------------------
# Specify the recHit reconstruction routine.
#--------------------------------------------------

#  include "RecoLocalMuon/CSCRecHit/data/csc2DRecHits.cfi"
   include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB_MTCC.cfi"
   replace csc2DRecHits.CSCchamberIdPrefix = 0

#--------------------------------------------------
# Specify the segment reconstruction routine.
#--------------------------------------------------

include "RecoLocalMuon/CSCSegment/data/cscSegments.cfi"
   replace cscSegments.algo_type = 3 // DF

#--------------------------------------------------
# Finally, specify my user analysis package !
#--------------------------------------------------
module ana = CSCEfficiency{
    untracked string rootFileName = 'monHists.root'
    untracked int32 WorkInEndcap = 1
    untracked int32 ExtrapolateFromStation = 3
    untracked int32 ExtrapolateToStation = 2
    untracked int32 ExtrapolateToRing = 2
    // true - data; false - MC
    untracked bool runOnData = true
    // if using existing file to recalculate efficiencies
    untracked bool update = false
}

#--------------------------------------------------
# Specify the analysis path and output module.
#--------------------------------------------------

 	module out = PoolOutputModule {
    	untracked string fileName ="data.root"
 	}
path p = {cscunpacker,csc2DRecHits, cscSegments, ana}

# 	endpath ep = {out}
}
