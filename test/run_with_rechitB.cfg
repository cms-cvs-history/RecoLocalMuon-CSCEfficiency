
process TESTss = {

   untracked PSet maxEvents = {untracked int32 input = 101}
   source = PoolSource {
                 untracked vstring fileNames = {"file:/localscratch/s/stoyan/run4318_0.0.root"}
     		 untracked uint32 debugVebosity = 10
     		 untracked bool debugFlag = true
   }
  include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
   replace cscunpacker.UnpackStatusDigis = true
   replace cscunpacker.isMTCCData = true

#### Variables read from database for calibration purposes
   es_source = PoolDBESSource {      VPSet toGet = {
                    { string record = "CSCGainsRcd"                       string tag = "CSCGains_from_online" },
                    { string record = "CSCNoiseMatrixRcd"                       string tag = "CSCNoiseMatrix_from_online" },
                    { string record = "CSCcrosstalkRcd"                       string tag = "CSCcrosstalk_from_online"}
                   }      bool loadAll = true
#### To run with test database
#     string connect = "oracle://devdb10/CMS_COND_CSC"
#     untracked string catalog = "relationalcatalog_oracle://devdb10/CMS_COND_GENERAL"


#### forntier:
     untracked bool siteLocalConfig = true
      string connect = "frontier://cms_conditions_data/CMS_COND_CSC"
     untracked uint32 authenticationMethod = 1
    string timetype = "runnumber"
    PSet DBParameters = { #                           untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
#                           untracked string authenticationPath="./"
                           untracked int32 messageLevel=0
                           untracked bool loadBlobStreamer = true
                         }
####     string timetype = "timestamp"
     untracked uint32 messagelevel = 0
   }

#######
# These are some useful utilities.
  service = Timing { }
  service = SimpleMemoryCheck { }
#
es_module = MuonNumberingInitialization { }
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	
# B field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

############# ss
include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

#
# DT, CSC, RPC, and Tracker geometry producers
#
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "Geometry/DTGeometry/data/dtGeometry.cfi"
include "Geometry/CSCGeometry/data/cscGeometry.cfi"
include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
include "Geometry/CommonDetUnit/data/bareGlobalTrackingGeometry.cfi"
include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"

# This is a fix for "No TrackingComponentsRecord found in the EventSetup."
include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"

# This is needed for rec tracks
include "TrackPropagation/SteppingHelixPropagator/data/SteppingHelixPropagatorAny.cfi"

# ES producer
include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"
####### ss
  include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB_MTCC.cfi"
# Specify the segment reconstruction routine.
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmSK.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmTC.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmDF.cfi"
  include "RecoLocalMuon/CSCSegment/data/CSCSegmentAlgorithmST.cfi"
###
# Set the CSCSegAlgo parameters (effectively avoids splitting of segments in 2)
  replace TC_ME1234.dRPhiFineMax = 6.0
  replace TC_ME1234.dPhiFineMax = 200.e-4
  replace SK_ME1234.dRPhiFineMax    = 6.0
  replace SK_ME1234.dPhiFineMax     = 200.e-4
###
#  module cscSegments = CSCSegmentProducer {
  module cscSegments = CSCSegmentProducer {
    InputTag inputObjects = csc2DRecHits
# Choice of the building algo: 1 SK, 2 TC, 3 DF, 4 ST, ...
###    int32 algo_type = 1
    int32 algo_type = 3
    VPSet algo_psets = {
       {using CSCSegAlgoSK}, {using CSCSegAlgoTC}, {using CSCSegAlgoDF},
       {using CSCSegAlgoST}
    }
  }
# Finally, specify my user analysis package !
module ana = CSCEfficiency{
    untracked bool writeAsciiFiles = false
    untracked string rootFileName = 'monHists.root' 
    untracked int32 WorkInEndcap = 1
    untracked int32 ExtrapolateFromStation = 3
    untracked int32 ExtrapolateToStation = 2 
    untracked int32 ExtrapolateToRing = 2
    untracked bool runOnData = true
    // if using existing file to recalculate efficiencies
    untracked bool update = false
}

	
 	module out = PoolOutputModule {
    	untracked string fileName ="data.root"
 	}


	path p = {cscunpacker,csc2DRecHits,cscSegments,ana}
# 	endpath ep = {out}
}
